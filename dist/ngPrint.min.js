"use strict";var ngPrint=angular.module("ngPrint",[]);
"use strict";ngPrint.factory("pdfPrinter",["$q","$timeout",function(t,e){var n=function(){var n=this,r=function(t,e){if(e=parseInt(e)||0,!e)return t;var n=document.createElement("canvas");n.height=t.height-e,n.width=t.width;var r=n.getContext("2d");return Pixastic.process(t,"crop",{rect:{left:0,top:e,width:t.width,height:t.height-e}},function(t){r.drawImage(t,0,0,t.width,t.height,0,0,t.width,t.height)}),n},i=function(t,e,n,i){for(var a=new jsPDF(e,n,i),h=a.internal,o=h.pageSize,d=h.scaleFactor,c=o.width,u=o.height,g=0,f=t.height,w=t.width/(c*d),s=0;f>g&&15>s;){var m=r(t,g),v=Math.random().toString(35);a.addImage(m,0,0,c,0,"png",v,"SLOW"),g+=u*d*w,f>g&&a.addPage(),s++}return a};n.generatePdfFromElement=function(n,r,a,h){var o=t.defer();return e(function(){html2canvas(n,{onrendered:function(t){var e=i(t,r,a,h);e.output("dataurlnewwindow"),e=null}})}),o.promise}},r=new n;return r}]);
"use strict";ngPrint.directive("ngPrintButton",["$window","pdfPrinter",function(t,e){return{restrict:"AC",require:"^ngPrintable",scope:{printWholePage:"&?"},link:function(n,r,i,o){var a=function(t){return{orientation:t.attributes.orientation?t.attributes.orientation.value:"p",unit:t.attributes.unit?t.attributes.unit.value:"pt",format:t.attributes.format?t.attributes.format.value:"a4"}};n.print=function(){var r;if(n.printWholePage?r=t.document.body:o&&(r=o.element),!r)throw new SyntaxError("No template element provided. Try using ngPrintable directive.");var i=a(r);e.generatePdfFromElement(r,i.orientation,i.unit,i.format)},r.on("click",n.print)}}}]);
"use strict";ngPrint.directive("ngPrintable",[function(){return{restrict:"A",scope:{orientation:"@?",unit:"@?",format:"@?"},link:function(t,n){t.element=n},controller:function(t){this.element=t.element}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nUHJpbnQtbW9kdWxlLmpzIiwicGRmUHJpbnRlci1zZXJ2aWNlLmpzIiwiY29tcG9uZW50c1xcZGlyZWN0aXZlc1xcbmdQcmludEJ1dHRvblxcbmdQcmludEJ1dHRvbi1kaXJlY3RpdmUuanMiLCJjb21wb25lbnRzXFxkaXJlY3RpdmVzXFxuZ1ByaW50YWJsZVxcbmdQcmludGFibGUtZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbIm5nUHJpbnQiLCJhbmd1bGFyIiwibW9kdWxlIiwiZmFjdG9yeSIsIiRxIiwiJHRpbWVvdXQiLCJQZGZQcmludGVyIiwic2VsZiIsInRoaXMiLCJjYW52YXNTaGlmdEltYWdlIiwib2xkQ2FudmFzIiwic2hpZnRBbXQiLCJwYXJzZUludCIsIm5ld0NhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImhlaWdodCIsIndpZHRoIiwiY3R4IiwiZ2V0Q29udGV4dCIsIlBpeGFzdGljIiwicHJvY2VzcyIsInJlY3QiLCJsZWZ0IiwidG9wIiwiZHJhd0ltYWdlIiwiZ2VuZXJhdGVQZGZGcm9tQ2FudmFzIiwiY2FudmFzIiwib3JpZW50YXRpb24iLCJ1bml0IiwiZm9ybWF0IiwicGRmIiwianNQREYiLCJwZGZJbnRlcm5hbHMiLCJpbnRlcm5hbCIsInBkZlBhZ2VTaXplIiwicGFnZVNpemUiLCJwZGZTY2FsZUZhY3RvciIsInNjYWxlRmFjdG9yIiwicGRmUGFnZVdpZHRoIiwicGRmUGFnZUhlaWdodCIsInRvdGFsUGRmSGVpZ2h0IiwiaHRtbFBhZ2VIZWlnaHQiLCJodG1sU2NhbGVGYWN0b3IiLCJzYWZldHlOZXQiLCJhbGlhcyIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsImFkZEltYWdlIiwiYWRkUGFnZSIsImdlbmVyYXRlUGRmRnJvbUVsZW1lbnQiLCJlbGVtZW50IiwiZGVmZXJyZWQiLCJkZWZlciIsImh0bWwyY2FudmFzIiwib25yZW5kZXJlZCIsIm91dHB1dCIsInByb21pc2UiLCJpbnN0IiwiZGlyZWN0aXZlIiwiJHdpbmRvdyIsInBkZlByaW50ZXIiLCJyZXN0cmljdCIsInJlcXVpcmUiLCJzY29wZSIsInByaW50V2hvbGVQYWdlIiwibGluayIsIiRzY29wZSIsImF0dHIiLCJuZ1ByaW50YWJsZUNvbnRyb2xsZXIiLCJnZXRDb25maWdBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInZhbHVlIiwicHJpbnQiLCJib2R5IiwiU3ludGF4RXJyb3IiLCJjb25maWciLCJvbiIsImNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiJBQUFBLFlBRUEsSUFBSUEsU0FBVUMsUUFBUUMsT0FBTztBQ0Q3QixZQUVBRixTQUFRRyxRQUFRLGNBQWUsS0FBTSxXQUFZLFNBQVVDLEVBQUlDLEdBQzlELEdBQUlDLEdBQWEsV0FDaEIsR0FBSUMsR0FBT0MsS0FFSkMsRUFBbUIsU0FBVUMsRUFBVUMsR0FFdkMsR0FEQUEsRUFBV0MsU0FBU0QsSUFBYSxHQUM3QkEsRUFBVyxNQUFPRCxFQUV0QixJQUFJRyxHQUFZQyxTQUFTQyxjQUFjLFNBQ3ZDRixHQUFVRyxPQUFTTixFQUFVTSxPQUFTTCxFQUN0Q0UsRUFBVUksTUFBUVAsRUFBVU8sS0FDNUIsSUFBSUMsR0FBTUwsRUFBVU0sV0FBVyxLQU0vQixPQUpBQyxVQUFTQyxRQUFRWCxFQUFXLFFBQVNZLE1BQU9DLEtBQU0sRUFBR0MsSUFBS2IsRUFBVU0sTUFBT1AsRUFBVU8sTUFBT0QsT0FBU04sRUFBVU0sT0FBU0wsSUFBYSxTQUFVRSxHQUN2SUssRUFBSU8sVUFBVVosRUFBVyxFQUFHLEVBQUdBLEVBQVVJLE1BQU9KLEVBQVVHLE9BQVEsRUFBRyxFQUFHSCxFQUFVSSxNQUFPSixFQUFVRyxVQUdwR0gsR0FZUGEsRUFBd0IsU0FBVUMsRUFBUUMsRUFBYUMsRUFBTUMsR0FZN0QsSUFYQSxHQUFJQyxHQUFNLEdBQUlDLE9BQU1KLEVBQWFDLEVBQU1DLEdBQ25DRyxFQUFlRixFQUFJRyxTQUNuQkMsRUFBY0YsRUFBYUcsU0FDM0JDLEVBQWlCSixFQUFhSyxZQUM5QkMsRUFBZUosRUFBWWxCLE1BQzNCdUIsRUFBZ0JMLEVBQVluQixPQUM1QnlCLEVBQWlCLEVBQ2pCQyxFQUFpQmYsRUFBT1gsT0FDeEIyQixFQUFrQmhCLEVBQU9WLE9BQVNzQixFQUFlRixHQUNqRE8sRUFBWSxFQUVPRixFQUFqQkQsR0FBK0MsR0FBWkcsR0FBZSxDQUNwRCxHQUFJL0IsR0FBWUosRUFBaUJrQixFQUFRYyxHQUNyQ0ksRUFBUUMsS0FBS0MsU0FBU0MsU0FBUyxHQUNuQ2pCLEdBQUlrQixTQUFTcEMsRUFBVyxFQUFHLEVBQUcwQixFQUFjLEVBQUcsTUFBT00sRUFBTyxRQUU3REosR0FBbUJELEVBQWdCSCxFQUFpQk0sRUFFaENELEVBQWpCRCxHQUNDVixFQUFJbUIsVUFFUk4sSUFHSixNQUFPYixHQUdYeEIsR0FBSzRDLHVCQUF5QixTQUFVQyxFQUFTeEIsRUFBYUMsRUFBTUMsR0FDbkUsR0FBSXVCLEdBQVdqRCxFQUFHa0QsT0FZbEIsT0FWQWpELEdBQVMsV0FDUmtELFlBQVlILEdBQ1JJLFdBQVksU0FBUzdCLEdBQ2pCLEdBQUlJLEdBQU1MLEVBQXNCQyxFQUFRQyxFQUFhQyxFQUFNQyxFQUMzREMsR0FBSTBCLE9BQU8sb0JBQ1gxQixFQUFNLFVBS1JzQixFQUFTSyxVQUlqQkMsRUFBTyxHQUFJckQsRUFDZixPQUFPcUQ7QUM3RVIsWUFFQTNELFNBQVE0RCxVQUFVLGlCQUFrQixVQUFXLGFBQWMsU0FBVUMsRUFBU0MsR0FDL0UsT0FDQ0MsU0FBVSxLQUNWQyxRQUFTLGVBQ1RDLE9BQ0NDLGVBQWdCLE1BRWpCQyxLQUFNLFNBQVVDLEVBQVFoQixFQUFTaUIsRUFBTUMsR0FDdEMsR0FBSUMsR0FBc0IsU0FBVW5CLEdBQ25DLE9BQ0N4QixZQUFhd0IsRUFBUW9CLFdBQXdCLFlBQUlwQixFQUFRb0IsV0FBd0IsWUFBRUMsTUFBUSxJQUMzRjVDLEtBQU11QixFQUFRb0IsV0FBaUIsS0FBSXBCLEVBQVFvQixXQUFpQixLQUFFQyxNQUFRLEtBQ3RFM0MsT0FBUXNCLEVBQVFvQixXQUFtQixPQUFJcEIsRUFBUW9CLFdBQW1CLE9BQUVDLE1BQVEsTUFLOUVMLEdBQU9NLE1BQVEsV0FDZCxHQUFJdEIsRUFRSixJQU5HZ0IsRUFBT0YsZUFDVGQsRUFBVVMsRUFBUS9DLFNBQVM2RCxLQUNsQkwsSUFDVGxCLEVBQVVrQixFQUFzQmxCLFVBRzlCQSxFQUlGLEtBQU0sSUFBSXdCLGFBQVksaUVBSHRCLElBQUlDLEdBQVNOLEVBQW9CbkIsRUFDakNVLEdBQVdYLHVCQUF1QkMsRUFBU3lCLEVBQU9qRCxZQUFhaUQsRUFBT2hELEtBQU1nRCxFQUFPL0MsU0FNckZzQixFQUFRMEIsR0FBRyxRQUFTVixFQUFPTTtBQ3BDOUIsWUFFQTFFLFNBQVE0RCxVQUFVLGVBQWdCLFdBQ2pDLE9BQ0NHLFNBQVUsSUFDVkUsT0FDQ3JDLFlBQWEsS0FDYkMsS0FBTSxLQUNOQyxPQUFRLE1BRVRxQyxLQUFNLFNBQVVDLEVBQVFoQixHQUN2QmdCLEVBQU9oQixRQUFVQSxHQUVsQjJCLFdBQVksU0FBVVgsR0FDckI1RCxLQUFLNEMsUUFBVWdCLEVBQU9oQiIsImZpbGUiOiJuZ1ByaW50Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBuZ1ByaW50ID0gYW5ndWxhci5tb2R1bGUoJ25nUHJpbnQnLCBbXSk7IiwiLyogZ2xvYmFsIG5nUHJpbnQqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5uZ1ByaW50LmZhY3RvcnkoJ3BkZlByaW50ZXInLCBbJyRxJywgJyR0aW1lb3V0JywgZnVuY3Rpb24gKCRxLCAkdGltZW91dCkge1xyXG5cdHZhciBQZGZQcmludGVyID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHQgICAgdmFyIGNhbnZhc1NoaWZ0SW1hZ2UgPSBmdW5jdGlvbiAob2xkQ2FudmFzLHNoaWZ0QW10KSB7XHJcblx0ICAgICAgICBzaGlmdEFtdCA9IHBhcnNlSW50KHNoaWZ0QW10KSB8fCAwO1xyXG5cdCAgICAgICAgaWYoIXNoaWZ0QW10KXsgcmV0dXJuIG9sZENhbnZhczsgfVxyXG5cclxuXHQgICAgICAgIHZhciBuZXdDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuXHQgICAgICAgIG5ld0NhbnZhcy5oZWlnaHQgPSBvbGRDYW52YXMuaGVpZ2h0IC0gc2hpZnRBbXQ7XHJcblx0ICAgICAgICBuZXdDYW52YXMud2lkdGggPSBvbGRDYW52YXMud2lkdGg7XHJcblx0ICAgICAgICB2YXIgY3R4ID0gbmV3Q2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG5cdCAgICAgICAgUGl4YXN0aWMucHJvY2VzcyhvbGRDYW52YXMsIFwiY3JvcFwiLCB7cmVjdDoge2xlZnQ6IDAsIHRvcDogc2hpZnRBbXQsIHdpZHRoOiBvbGRDYW52YXMud2lkdGgsIGhlaWdodDogKG9sZENhbnZhcy5oZWlnaHQgLSBzaGlmdEFtdCl9fSwgZnVuY3Rpb24gKG5ld0NhbnZhcykge1xyXG5cdCAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKG5ld0NhbnZhcywgMCwgMCwgbmV3Q2FudmFzLndpZHRoLCBuZXdDYW52YXMuaGVpZ2h0LCAwLCAwLCBuZXdDYW52YXMud2lkdGgsIG5ld0NhbnZhcy5oZWlnaHQpO1xyXG5cdCAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgIHJldHVybiBuZXdDYW52YXM7XHJcbiAgICBcdH07XHJcblx0ICAgIFxyXG5cdCAgICAvKipcclxuXHRcdCAqIENyZWF0ZXMgbmV3IGpzUERGIGRvY3VtZW50IG9iamVjdCBpbnN0YW5jZS5cclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0gb3JpZW50YXRpb24gT25lIG9mIFwicG9ydHJhaXRcIiBvciBcImxhbmRzY2FwZVwiIChvciBzaG9ydGN1dHMgXCJwXCIgKERlZmF1bHQpLCBcImxcIilcclxuXHRcdCAqIEBwYXJhbSB1bml0ICAgICAgICBNZWFzdXJlbWVudCB1bml0IHRvIGJlIHVzZWQgd2hlbiBjb29yZGluYXRlcyBhcmUgc3BlY2lmaWVkLlxyXG5cdFx0ICogICAgICAgICAgICAgICAgICAgIE9uZSBvZiBcInB0XCIgKHBvaW50cyksIFwibW1cIiAoRGVmYXVsdCksIFwiY21cIiwgXCJpblwiXHJcblx0XHQgKiBAcGFyYW0gZm9ybWF0ICAgICAgT25lIG9mICdwYWdlRm9ybWF0cycgYXMgdmlzaWJsZSBpbiBqc1BERiBkb2NzLCBkZWZhdWx0OiBhNFxyXG5cdFx0ICogQHJldHVybnMge2pzUERGfVxyXG5cdFx0ICovXHJcblx0ICAgIHZhciBnZW5lcmF0ZVBkZkZyb21DYW52YXMgPSBmdW5jdGlvbiAoY2FudmFzLCBvcmllbnRhdGlvbiwgdW5pdCwgZm9ybWF0KSB7XHJcblx0ICAgICAgICB2YXIgcGRmID0gbmV3IGpzUERGKG9yaWVudGF0aW9uLCB1bml0LCBmb3JtYXQpLFxyXG5cdCAgICAgICAgICAgIHBkZkludGVybmFscyA9IHBkZi5pbnRlcm5hbCxcclxuXHQgICAgICAgICAgICBwZGZQYWdlU2l6ZSA9IHBkZkludGVybmFscy5wYWdlU2l6ZSxcclxuXHQgICAgICAgICAgICBwZGZTY2FsZUZhY3RvciA9IHBkZkludGVybmFscy5zY2FsZUZhY3RvcixcclxuXHQgICAgICAgICAgICBwZGZQYWdlV2lkdGggPSBwZGZQYWdlU2l6ZS53aWR0aCxcclxuXHQgICAgICAgICAgICBwZGZQYWdlSGVpZ2h0ID0gcGRmUGFnZVNpemUuaGVpZ2h0LFxyXG5cdCAgICAgICAgICAgIHRvdGFsUGRmSGVpZ2h0ID0gMCxcclxuXHQgICAgICAgICAgICBodG1sUGFnZUhlaWdodCA9IGNhbnZhcy5oZWlnaHQsXHJcblx0ICAgICAgICAgICAgaHRtbFNjYWxlRmFjdG9yID0gY2FudmFzLndpZHRoIC8gKHBkZlBhZ2VXaWR0aCAqIHBkZlNjYWxlRmFjdG9yKSxcclxuXHQgICAgICAgICAgICBzYWZldHlOZXQgPSAwO1xyXG5cdCAgICAgICAgXHJcblx0ICAgICAgICB3aGlsZSh0b3RhbFBkZkhlaWdodCA8IGh0bWxQYWdlSGVpZ2h0ICYmIHNhZmV0eU5ldCA8IDE1KXtcclxuXHQgICAgICAgICAgICB2YXIgbmV3Q2FudmFzID0gY2FudmFzU2hpZnRJbWFnZShjYW52YXMsIHRvdGFsUGRmSGVpZ2h0KTtcclxuXHQgICAgICAgICAgICB2YXIgYWxpYXMgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM1KTtcclxuXHQgICAgICAgICAgICBwZGYuYWRkSW1hZ2UobmV3Q2FudmFzLCAwLCAwLCBwZGZQYWdlV2lkdGgsIDAsICdwbmcnLCBhbGlhcywgJ1NMT1cnKTtcclxuXHQgICAgICAgICAgICBcclxuXHQgICAgICAgICAgICB0b3RhbFBkZkhlaWdodCArPSAocGRmUGFnZUhlaWdodCAqIHBkZlNjYWxlRmFjdG9yICogaHRtbFNjYWxlRmFjdG9yKTtcclxuXHQgICAgICAgICAgICBcclxuXHQgICAgICAgICAgICBpZih0b3RhbFBkZkhlaWdodCA8IGh0bWxQYWdlSGVpZ2h0KXtcclxuXHQgICAgICAgICAgICAgICAgcGRmLmFkZFBhZ2UoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgc2FmZXR5TmV0Kys7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBcclxuXHQgICAgICAgIHJldHVybiBwZGY7XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICBzZWxmLmdlbmVyYXRlUGRmRnJvbUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3JpZW50YXRpb24sIHVuaXQsIGZvcm1hdCkge1xyXG5cdCAgICBcdHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG5cdCAgICBcdCR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgXHRcdGh0bWwyY2FudmFzKGVsZW1lbnQsIHtcclxuXHQgICAgICAgIFx0XHRvbnJlbmRlcmVkOiBmdW5jdGlvbihjYW52YXMpe1xyXG5cdCAgICAgICAgICAgIFx0XHR2YXIgcGRmID0gZ2VuZXJhdGVQZGZGcm9tQ2FudmFzKGNhbnZhcywgb3JpZW50YXRpb24sIHVuaXQsIGZvcm1hdCk7XHJcblx0ICAgICAgICAgICAgXHRcdHBkZi5vdXRwdXQoXCJkYXRhdXJsbmV3d2luZG93XCIpO1xyXG5cdCAgICAgICAgICAgIFx0XHRwZGYgPSBudWxsO1xyXG5cdCAgICAgICAgXHRcdH1cclxuXHQgICAgXHRcdH0pO1xyXG5cdCAgICBcdH0pO1xyXG5cclxuXHQgICAgXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuXHQgICAgfTtcclxuXHR9O1xyXG5cclxuXHR2YXIgaW5zdCA9IG5ldyBQZGZQcmludGVyKCk7XHJcblx0cmV0dXJuIGluc3Q7XHJcbn1dKTsiLCIvKmdsb2JhbCBuZ1ByaW50Ki9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxubmdQcmludC5kaXJlY3RpdmUoJ25nUHJpbnRCdXR0b24nLCBbJyR3aW5kb3cnLCAncGRmUHJpbnRlcicsIGZ1bmN0aW9uICgkd2luZG93LCBwZGZQcmludGVyKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHJlc3RyaWN0OiAnQUMnLFxyXG5cdFx0cmVxdWlyZTogJ15uZ1ByaW50YWJsZScsXHJcblx0XHRzY29wZToge1xyXG5cdFx0XHRwcmludFdob2xlUGFnZTogJyY/J1xyXG5cdFx0fSxcclxuXHRcdGxpbms6IGZ1bmN0aW9uICgkc2NvcGUsIGVsZW1lbnQsIGF0dHIsIG5nUHJpbnRhYmxlQ29udHJvbGxlcikge1xyXG5cdFx0XHR2YXIgZ2V0Q29uZmlnQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcblx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdG9yaWVudGF0aW9uOiBlbGVtZW50LmF0dHJpYnV0ZXNbJ29yaWVudGF0aW9uJ10gPyBlbGVtZW50LmF0dHJpYnV0ZXNbJ29yaWVudGF0aW9uJ10udmFsdWUgOiAncCcsXHJcblx0XHRcdFx0XHR1bml0OiBlbGVtZW50LmF0dHJpYnV0ZXNbJ3VuaXQnXSA/IGVsZW1lbnQuYXR0cmlidXRlc1sndW5pdCddLnZhbHVlIDogJ3B0JyxcclxuXHRcdFx0XHRcdGZvcm1hdDogZWxlbWVudC5hdHRyaWJ1dGVzWydmb3JtYXQnXSA/IGVsZW1lbnQuYXR0cmlidXRlc1snZm9ybWF0J10udmFsdWUgOiAnYTQnXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fTtcclxuXHJcblxyXG5cdFx0XHQkc2NvcGUucHJpbnQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0dmFyIGVsZW1lbnQ7XHJcblxyXG5cdFx0XHRcdGlmKCRzY29wZS5wcmludFdob2xlUGFnZSkge1xyXG5cdFx0XHRcdFx0ZWxlbWVudCA9ICR3aW5kb3cuZG9jdW1lbnQuYm9keTtcclxuXHRcdFx0XHR9IGVsc2UgaWYobmdQcmludGFibGVDb250cm9sbGVyKSB7XHJcblx0XHRcdFx0XHRlbGVtZW50ID0gbmdQcmludGFibGVDb250cm9sbGVyLmVsZW1lbnQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZihlbGVtZW50KSB7XHJcblx0XHRcdFx0XHR2YXIgY29uZmlnID0gZ2V0Q29uZmlnQXR0cmlidXRlcyhlbGVtZW50KTtcclxuXHRcdFx0XHRcdHBkZlByaW50ZXIuZ2VuZXJhdGVQZGZGcm9tRWxlbWVudChlbGVtZW50LCBjb25maWcub3JpZW50YXRpb24sIGNvbmZpZy51bml0LCBjb25maWcuZm9ybWF0KTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKCdObyB0ZW1wbGF0ZSBlbGVtZW50IHByb3ZpZGVkLiBUcnkgdXNpbmcgbmdQcmludGFibGUgZGlyZWN0aXZlLicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGVsZW1lbnQub24oJ2NsaWNrJywgJHNjb3BlLnByaW50KTtcclxuXHRcdH1cclxuXHR9O1xyXG59XSk7IiwiLyogZ2xvYmFsIG5nUHJpbnQqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5uZ1ByaW50LmRpcmVjdGl2ZSgnbmdQcmludGFibGUnLCBbZnVuY3Rpb24gKCkge1xyXG5cdHJldHVybiB7XHJcblx0XHRyZXN0cmljdDogJ0EnLFxyXG5cdFx0c2NvcGU6IHtcclxuXHRcdFx0b3JpZW50YXRpb246ICdAPycsXHJcblx0XHRcdHVuaXQ6ICdAPycsXHJcblx0XHRcdGZvcm1hdDogJ0A/J1xyXG5cdFx0fSxcclxuXHRcdGxpbms6IGZ1bmN0aW9uICgkc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcblx0XHRcdCRzY29wZS5lbGVtZW50ID0gZWxlbWVudDtcclxuXHRcdH0sXHJcblx0XHRjb250cm9sbGVyOiBmdW5jdGlvbiAoJHNjb3BlKSB7XHJcblx0XHRcdHRoaXMuZWxlbWVudCA9ICRzY29wZS5lbGVtZW50O1xyXG5cdFx0fVxyXG5cdH07XHJcbn1dKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=